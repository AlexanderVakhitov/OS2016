#!/bin/bash

PLAYER="USERNAME";
SERVER="true";

PORT=3030;
ADDRESS=localhost;
TIMEOUT=100;

TEST3=400;
TEST5=600;
TEST1=200;
TEST2=800;
TEST1=900;
TEST2=333;
TEST3=444;
TEST4=555;
TEST5=777;
TEST5=666;
TEST6=777;
TEST7=888;

CONNECTMSG="START";
NETCAT=nc;

FIELD=();
TURN=0;

quit() {
  if [[ -n "$COPROC_PID" ]]
  then
    kill $COPROC_PID;
  fi

  exit $1;
}

isConnect() {
  if [[ -z "$COPROC_PID" ]]
  then
    echo "Error! Connection is closed!";
    quit 4;
  fi
}

init() {
  for (( i=0; i<9; ++i ))
  do
    FIELD[i]=0;
  done

  swapTurn;
  showField;
}

resultMessage() {
  clear;
  tput cup 0 0;

  if [[ "$1" == "PLY" ]]
  then
    echo "---Congratulations! You win!!!---";
  elif [[ "$1" == "OPP" ]]
  then
    echo "---You lose!!!---";
  elif [[ "$1" == "DRAW" ]]
  then
    echo "---Draw!!!---";
  fi

  tput cup 2 0;
  echo "Play again? (Y/N)";
}

showField() {
  clear;
  tput cup 0 0;
  echo "---Game is Started---";

  tput cup 2 0;
  echo " -------------";
  for (( i = 0; i < 3; ++i ))
  do
    for (( j = 0; j < 3; ++j ))
    do
      CELL=" ";
      if [[ ${FIELD[3*i+j]} -eq 1 ]]
      then
        CELL="X";
      elif [[ ${FIELD[3*i+j]} -eq 2 ]]
      then
        CELL="O";
      fi
      echo -n " | $CELL";
    done
    echo " |";
    echo " -------------";
  done
}

swapTurn() {
  if [[ $TURN -eq 0 ]]
  then
    TURN=1;
  else
    TURN=0;
  fi
}

waitTurn() {
  tput cup 10 0;
  echo -n "Wait turn of opponent...";

  stty -echo;
  read -u "${COPROC[0]}" turn
  stty echo;

  set -- "$turn";
  IFS=" "; declare -a arr=($*);

  i=$((${arr[0]}-1));
  j=$((${arr[1]}-1));
  x=$((3*i+j));
  FIELD[$x]=2;

  swapTurn;
}

makeTurn() {
  tput cup 10 0;
  echo -n "Enter your turn: ";

  while true
  do
    clearInputBuffer;
    read turn;
    
    set -- "$turn";
    IFS=" "; declare -a arr=($*);

    if [[ ${arr[0]} -lt 1 ]] || [[ ${arr[0]} -gt 3 ]] || [[ ${arr[1]} -lt 1 ]] || [[ ${arr[1]} -gt 3 ]]
    then
      showField;
      tput cup 10 0;
      echo -n "Wrong enter! Please, enter your turn correctly: ";
      continue;
    fi

    i=$((${arr[0]}-1));
    j=$((${arr[1]}-1));
    x=$((3*i+j));

    if [[ ${FIELD[$x]} -ne 0 ]]
    then
      showField;
      tput cup 10 0;
      echo -n "This cell is already used! Please, enter your turn correctly: ";
      continue;
    fi

    FIELD[$x]=1;
    echo "$turn" >& "${COPROC[1]}";
    break;
  done

  swapTurn;
}

clearInputBuffer() {
  while read -r -t 0
  do 
    read -r; 
  done
}

endGame() {
  if isCombination 0 3 6 1 || isCombination 1 4 7 1 || isCombination 2 5 8 1
  then
    resultMessage "PLY";
    return 0;
  elif isCombination 0 1 2 1 || isCombination 3 4 5 1 || isCombination 6 7 8 1
  then
    resultMessage "PLY";
    return 0;
  elif isCombination 0 4 8 1 || isCombination 2 4 6 1
  then 
    resultMessage "PLY";
    return 0;
  fi

  if isCombination 0 3 6 2 || isCombination 1 4 7 2 || isCombination 2 5 8 2
  then
    resultMessage "OPP";
    return 0;
  elif isCombination 0 1 2 2 || isCombination 3 4 5 2 || isCombination 6 7 8 2
  then
    resultMessage "OPP";
    return 0;
  elif isCombination 0 4 8 2 || isCombination 2 4 6 2
  then 
    resultMessage "OPP";
    return 0;
  fi
  
  DRAWINDEX=0;
  for (( i = 0; i < 3; ++i ))
  do
    for (( j = 0; j < 3; ++j ))
    do
      if [[ ${FIELD[3*i+j]} -ne 0 ]]
      then
        ((DRAWINDEX++));
      fi
    done
  done 
  if [[ $DRAWINDEX -eq 9 ]]
  then
    resultMessage "DRAW";
    return 0;
  fi
 
  return 1;
}

isCombination() {
  if [[ ${FIELD[$1]} -eq $4 ]] && [[ ${FIELD[$2]} -eq $4 ]] && [[ ${FIELD[$3]} -eq $4 ]]
  then
    return 0;
  fi
  return 1;
}

printHelp() {
  echo "--Help message--";
  echo "Commands:";
  echo "   -s|--server - run as server";
  echo "   -h|--help - show help message";
  echo "Game:";
  echo "Turn is two numbers [row] [column] in 1-3 interval.";
  quit 0;
}

while [[ $# -ge 1 ]]
do
  key=$1;
  case $key in
    -s|--server)
      SERVER="true";
    ;;
    -h|--help)
      printHelp;
    ;;
    *)
      echo "Error! Wrong params, please enter -h|--help.";
      quit 1;
    ;;
  esac
  shift
done

if [[ "$SERVER" = "true" ]]
then
  coproc $NETCAT -q "$TIMEOUT" -l -p "$PORT";
  TURN=0;
else
  coproc $NETCAT -q "$TIMEOUT" "$ADDRESS" "$PORT";
  TURN=1;
fi

clear;
echo "Waiting for connections...";
echo "$CONNECTMSG" >& "${COPROC[1]}";

if ! read -t "$TIMEOUT" -u "${COPROC[0]}" MSG
then
  echo "Error! Failed to connect!";
  quit 2;
fi

if [[ "$MSG" != "$CONNECTMSG" ]] 
then
  echo "Error! Unknown connection!";
  quit 3;
fi

while true
do 
  clear;
  echo "Waiting for opponent...";
  echo "$CONNECTMSG" >& "${COPROC[1]}";

  if ! read -t "$TIMEOUT" -u "${COPROC[0]}" MSG
  then
    echo "Error! Your opponent is out!";
    quit 5;
  fi

  init;

  while true
  do
    isConnect;
    if [[ $TURN -eq 0 ]]
    then
      waitTurn;
    else
      makeTurn;
    fi

    showField;

    if endGame
    then
      break;
    fi
  done
  
  while read -s -n 1 CHOSE
  do
    isConnect;
    if [[ "$CHOSE" == "y" ]] || [[ "$CHOSE" == "Y" ]]
    then
      continue 2;
    fi
    if [[ "$CHOSE" == "n" ]] || [[ "$CHOSE" == "N" ]]
    then
      break 2;
    fi
  done
done

quit 0;



